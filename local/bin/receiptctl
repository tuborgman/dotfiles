#!/usr/bin/env sh

LINUX="LINUX"
MAC_OS="MAC_OS"

show_help() {
  cat <<EOF
Usage: receiptctl [command]

Available commands:

	process [from_dir] [dest_dir]	processes the receipts
EOF

  exit 1
}

hash() {
  local platform="$(platform)"

  if [ "$platform" == "$LINUX" ]; then
    md5sum "$@" | awk '{print $1}'
  elif [ "$platform" == "$MAC_OS" ]; then
    md5 -q "$@"
  fi
}

copy() {
  local platform="$(platform)"

  if [ "$platform" == "$LINUX" ]; then
    xsel -b
  elif [ "$platform" == "$MAC_OS" ]; then
    pbcopy
  fi
}

rename_file() {
  local dest="$1"
  local file="$2"
  local filename=$(basename "$file")
  local extension="${filename##*.}"
  local filename="${filename%.*}"

  local hash=$(hash "$file")

  local new_location="$dest/$hash.$extension"

  echo "Moving to $new_location..."
  mv "$file" "$new_location"

  printf "\n    ; Receipt: $hash.$extension\n" | copy
  echo "Copied receipt line, ready for pasting, to clipboard..."
}

platform() {
  if [ "$(uname)" == "Darwin" ]; then
    echo "$MAC_OS"
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    echo "$LINUX"
  else
    (>&2 echo "Platform not recognized")
    exit 1
  fi
}

view_receipt() {
  local platform="$(platform)"

  if [ "$platform" == "$LINUX" ]; then
    xdg-open $@
  elif [ "$platform" == "$MAC_OS" ]; then
    open $@
  fi

}

process_file() {
  local dest="$1"
  local file="$2"

  echo "Processing $file..."
  view_receipt "$file"
  cat <<EOF
Commands:

	r: rename
	s: skip
	d: delete
	q: quit

EOF
  printf "Option: "
  read -n 1 cmd
  printf "\n"

  case $cmd in
    "r")
      rename_file "$dest" "$file"
      ;;
    "s")
      echo "Skipping..."
      ;;
    "d")
      echo "Deleting file..."
      rm "$file"
      ;;
    "q")
      exit 1
      ;;
    *)
      echo "Invalid command. Skipping..."
      ;;
  esac
}

process() {
  local from=$1
  local dest=$2

  OIFS="$IFS"
  IFS=$'\n'
  for file in `find $from -type f`
  do
    process_file "$dest" "$file"
  done
  IFS="$OIFS"
}

handle_command_line() {
  local cmd=$1
  local args="${*:2}"

  case $cmd in
    "process")
      process $args
      ;;
    *)
      show_help
      ;;
  esac
}

if [ $# -eq 0 ]; then
  show_help
fi

handle_command_line "$@"
